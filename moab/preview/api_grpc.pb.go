// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: evrblkapis/moab/preview/api.proto

package moab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MoabPreviewApi_CreateQueue_FullMethodName    = "/com.evrblk.moab.preview.MoabPreviewApi/CreateQueue"
	MoabPreviewApi_GetQueue_FullMethodName       = "/com.evrblk.moab.preview.MoabPreviewApi/GetQueue"
	MoabPreviewApi_UpdateQueue_FullMethodName    = "/com.evrblk.moab.preview.MoabPreviewApi/UpdateQueue"
	MoabPreviewApi_DeleteQueue_FullMethodName    = "/com.evrblk.moab.preview.MoabPreviewApi/DeleteQueue"
	MoabPreviewApi_ListQueues_FullMethodName     = "/com.evrblk.moab.preview.MoabPreviewApi/ListQueues"
	MoabPreviewApi_GetTask_FullMethodName        = "/com.evrblk.moab.preview.MoabPreviewApi/GetTask"
	MoabPreviewApi_Enqueue_FullMethodName        = "/com.evrblk.moab.preview.MoabPreviewApi/Enqueue"
	MoabPreviewApi_Dequeue_FullMethodName        = "/com.evrblk.moab.preview.MoabPreviewApi/Dequeue"
	MoabPreviewApi_ReportStatus_FullMethodName   = "/com.evrblk.moab.preview.MoabPreviewApi/ReportStatus"
	MoabPreviewApi_DeleteTasks_FullMethodName    = "/com.evrblk.moab.preview.MoabPreviewApi/DeleteTasks"
	MoabPreviewApi_RestartTasks_FullMethodName   = "/com.evrblk.moab.preview.MoabPreviewApi/RestartTasks"
	MoabPreviewApi_PurgeQueue_FullMethodName     = "/com.evrblk.moab.preview.MoabPreviewApi/PurgeQueue"
	MoabPreviewApi_CreateSchedule_FullMethodName = "/com.evrblk.moab.preview.MoabPreviewApi/CreateSchedule"
	MoabPreviewApi_GetSchedule_FullMethodName    = "/com.evrblk.moab.preview.MoabPreviewApi/GetSchedule"
	MoabPreviewApi_UpdateSchedule_FullMethodName = "/com.evrblk.moab.preview.MoabPreviewApi/UpdateSchedule"
	MoabPreviewApi_DeleteSchedule_FullMethodName = "/com.evrblk.moab.preview.MoabPreviewApi/DeleteSchedule"
)

// MoabPreviewApiClient is the client API for MoabPreviewApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoabPreviewApiClient interface {
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*UpdateQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*ReportStatusResponse, error)
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*DeleteTasksResponse, error)
	RestartTasks(ctx context.Context, in *RestartTasksRequest, opts ...grpc.CallOption) (*RestartTasksResponse, error)
	PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error)
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error)
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error)
	UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*UpdateScheduleResponse, error)
	DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error)
}

type moabPreviewApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMoabPreviewApiClient(cc grpc.ClientConnInterface) MoabPreviewApiClient {
	return &moabPreviewApiClient{cc}
}

func (c *moabPreviewApiClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_GetQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*UpdateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_UpdateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) ReportStatus(ctx context.Context, in *ReportStatusRequest, opts ...grpc.CallOption) (*ReportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportStatusResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...grpc.CallOption) (*DeleteTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTasksResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_DeleteTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) RestartTasks(ctx context.Context, in *RestartTasksRequest, opts ...grpc.CallOption) (*RestartTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartTasksResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_RestartTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeQueueResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_PurgeQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScheduleResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_CreateSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScheduleResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*UpdateScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScheduleResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_UpdateSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moabPreviewApiClient) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScheduleResponse)
	err := c.cc.Invoke(ctx, MoabPreviewApi_DeleteSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoabPreviewApiServer is the server API for MoabPreviewApi service.
// All implementations must embed UnimplementedMoabPreviewApiServer
// for forward compatibility.
type MoabPreviewApiServer interface {
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	UpdateQueue(context.Context, *UpdateQueueRequest) (*UpdateQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	ReportStatus(context.Context, *ReportStatusRequest) (*ReportStatusResponse, error)
	DeleteTasks(context.Context, *DeleteTasksRequest) (*DeleteTasksResponse, error)
	RestartTasks(context.Context, *RestartTasksRequest) (*RestartTasksResponse, error)
	PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error)
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error)
	GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error)
	UpdateSchedule(context.Context, *UpdateScheduleRequest) (*UpdateScheduleResponse, error)
	DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error)
	mustEmbedUnimplementedMoabPreviewApiServer()
}

// UnimplementedMoabPreviewApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoabPreviewApiServer struct{}

func (UnimplementedMoabPreviewApiServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) UpdateQueue(context.Context, *UpdateQueueRequest) (*UpdateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedMoabPreviewApiServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedMoabPreviewApiServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedMoabPreviewApiServer) ReportStatus(context.Context, *ReportStatusRequest) (*ReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedMoabPreviewApiServer) DeleteTasks(context.Context, *DeleteTasksRequest) (*DeleteTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTasks not implemented")
}
func (UnimplementedMoabPreviewApiServer) RestartTasks(context.Context, *RestartTasksRequest) (*RestartTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartTasks not implemented")
}
func (UnimplementedMoabPreviewApiServer) PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueue not implemented")
}
func (UnimplementedMoabPreviewApiServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedMoabPreviewApiServer) GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedMoabPreviewApiServer) UpdateSchedule(context.Context, *UpdateScheduleRequest) (*UpdateScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedule not implemented")
}
func (UnimplementedMoabPreviewApiServer) DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (UnimplementedMoabPreviewApiServer) mustEmbedUnimplementedMoabPreviewApiServer() {}
func (UnimplementedMoabPreviewApiServer) testEmbeddedByValue()                        {}

// UnsafeMoabPreviewApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoabPreviewApiServer will
// result in compilation errors.
type UnsafeMoabPreviewApiServer interface {
	mustEmbedUnimplementedMoabPreviewApiServer()
}

func RegisterMoabPreviewApiServer(s grpc.ServiceRegistrar, srv MoabPreviewApiServer) {
	// If the following call pancis, it indicates UnimplementedMoabPreviewApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MoabPreviewApi_ServiceDesc, srv)
}

func _MoabPreviewApi_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_GetQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_UpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).UpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_UpdateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).UpdateQueue(ctx, req.(*UpdateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).ReportStatus(ctx, req.(*ReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_DeleteTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).DeleteTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_DeleteTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).DeleteTasks(ctx, req.(*DeleteTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_RestartTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).RestartTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_RestartTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).RestartTasks(ctx, req.(*RestartTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_PurgeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).PurgeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_PurgeQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).PurgeQueue(ctx, req.(*PurgeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_UpdateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).UpdateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_UpdateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).UpdateSchedule(ctx, req.(*UpdateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoabPreviewApi_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoabPreviewApiServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoabPreviewApi_DeleteSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoabPreviewApiServer).DeleteSchedule(ctx, req.(*DeleteScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoabPreviewApi_ServiceDesc is the grpc.ServiceDesc for MoabPreviewApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoabPreviewApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.evrblk.moab.preview.MoabPreviewApi",
	HandlerType: (*MoabPreviewApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _MoabPreviewApi_CreateQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _MoabPreviewApi_GetQueue_Handler,
		},
		{
			MethodName: "UpdateQueue",
			Handler:    _MoabPreviewApi_UpdateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _MoabPreviewApi_DeleteQueue_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _MoabPreviewApi_ListQueues_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _MoabPreviewApi_GetTask_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _MoabPreviewApi_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _MoabPreviewApi_Dequeue_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _MoabPreviewApi_ReportStatus_Handler,
		},
		{
			MethodName: "DeleteTasks",
			Handler:    _MoabPreviewApi_DeleteTasks_Handler,
		},
		{
			MethodName: "RestartTasks",
			Handler:    _MoabPreviewApi_RestartTasks_Handler,
		},
		{
			MethodName: "PurgeQueue",
			Handler:    _MoabPreviewApi_PurgeQueue_Handler,
		},
		{
			MethodName: "CreateSchedule",
			Handler:    _MoabPreviewApi_CreateSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _MoabPreviewApi_GetSchedule_Handler,
		},
		{
			MethodName: "UpdateSchedule",
			Handler:    _MoabPreviewApi_UpdateSchedule_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _MoabPreviewApi_DeleteSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evrblkapis/moab/preview/api.proto",
}
