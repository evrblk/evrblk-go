// Code generated by `go run ./cmd/codegen`. DO NOT EDIT.

package moab

import (
	"context"
	evrblk "github.com/evrblk/evrblk-go"
	internal "github.com/evrblk/evrblk-go/internal"
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
	"log"
	"time"
)

type MoabApi interface {
	CreateQueue(ctx context.Context, request *CreateQueueRequest) (*CreateQueueResponse, error)
	GetQueue(ctx context.Context, request *GetQueueRequest) (*GetQueueResponse, error)
	UpdateQueue(ctx context.Context, request *UpdateQueueRequest) (*UpdateQueueResponse, error)
	DeleteQueue(ctx context.Context, request *DeleteQueueRequest) (*DeleteQueueResponse, error)
	ListQueues(ctx context.Context, request *ListQueuesRequest) (*ListQueuesResponse, error)
	GetTask(ctx context.Context, request *GetTaskRequest) (*GetTaskResponse, error)
	Enqueue(ctx context.Context, request *EnqueueRequest) (*EnqueueResponse, error)
	Dequeue(ctx context.Context, request *DequeueRequest) (*DequeueResponse, error)
	ReportStatus(ctx context.Context, request *ReportStatusRequest) (*ReportStatusResponse, error)
	DeleteTasks(ctx context.Context, request *DeleteTasksRequest) (*DeleteTasksResponse, error)
	RestartTasks(ctx context.Context, request *RestartTasksRequest) (*RestartTasksResponse, error)
	PurgeQueue(ctx context.Context, request *PurgeQueueRequest) (*PurgeQueueResponse, error)
	CreateSchedule(ctx context.Context, request *CreateScheduleRequest) (*CreateScheduleResponse, error)
	GetSchedule(ctx context.Context, request *GetScheduleRequest) (*GetScheduleResponse, error)
	UpdateSchedule(ctx context.Context, request *UpdateScheduleRequest) (*UpdateScheduleResponse, error)
	DeleteSchedule(ctx context.Context, request *DeleteScheduleRequest) (*DeleteScheduleResponse, error)
}
type MoabGrpcClient struct {
	grpc   MoabPreviewApiClient
	conn   *grpc.ClientConn
	signer evrblk.RequestSigner
}

var _ MoabApi = &MoabGrpcClient{}

func (c *MoabGrpcClient) WithSigner(signer evrblk.RequestSigner) *MoabGrpcClient {
	return &MoabGrpcClient{
		conn:   c.conn,
		grpc:   c.grpc,
		signer: signer,
	}
}

func (c *MoabGrpcClient) Close() {
	c.conn.Close()
}

func (c *MoabGrpcClient) CreateQueue(ctx context.Context, request *CreateQueueRequest) (*CreateQueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "CreateQueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "CreateQueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "CreateQueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateQueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "CreateQueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) GetQueue(ctx context.Context, request *GetQueueRequest) (*GetQueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "GetQueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "GetQueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "GetQueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetQueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "GetQueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) UpdateQueue(ctx context.Context, request *UpdateQueueRequest) (*UpdateQueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "UpdateQueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "UpdateQueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "UpdateQueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateQueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "UpdateQueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) DeleteQueue(ctx context.Context, request *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "DeleteQueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "DeleteQueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "DeleteQueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteQueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "DeleteQueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) ListQueues(ctx context.Context, request *ListQueuesRequest) (*ListQueuesResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "ListQueues").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "ListQueues"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "ListQueues")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListQueues(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "ListQueues", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) GetTask(ctx context.Context, request *GetTaskRequest) (*GetTaskResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "GetTask").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "GetTask"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "GetTask")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetTask(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "GetTask", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) Enqueue(ctx context.Context, request *EnqueueRequest) (*EnqueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "Enqueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "Enqueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "Enqueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.Enqueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "Enqueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) Dequeue(ctx context.Context, request *DequeueRequest) (*DequeueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "Dequeue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "Dequeue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "Dequeue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.Dequeue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "Dequeue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) ReportStatus(ctx context.Context, request *ReportStatusRequest) (*ReportStatusResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "ReportStatus").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "ReportStatus"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "ReportStatus")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ReportStatus(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "ReportStatus", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) DeleteTasks(ctx context.Context, request *DeleteTasksRequest) (*DeleteTasksResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "DeleteTasks").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "DeleteTasks"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "DeleteTasks")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteTasks(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "DeleteTasks", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) RestartTasks(ctx context.Context, request *RestartTasksRequest) (*RestartTasksResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "RestartTasks").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "RestartTasks"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "RestartTasks")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.RestartTasks(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "RestartTasks", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) PurgeQueue(ctx context.Context, request *PurgeQueueRequest) (*PurgeQueueResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "PurgeQueue").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "PurgeQueue"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "PurgeQueue")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.PurgeQueue(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "PurgeQueue", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) CreateSchedule(ctx context.Context, request *CreateScheduleRequest) (*CreateScheduleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "CreateSchedule").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "CreateSchedule"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "CreateSchedule")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateSchedule(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "CreateSchedule", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) GetSchedule(ctx context.Context, request *GetScheduleRequest) (*GetScheduleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "GetSchedule").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "GetSchedule"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "GetSchedule")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetSchedule(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "GetSchedule", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) UpdateSchedule(ctx context.Context, request *UpdateScheduleRequest) (*UpdateScheduleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "UpdateSchedule").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "UpdateSchedule"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "UpdateSchedule")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateSchedule(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "UpdateSchedule", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *MoabGrpcClient) DeleteSchedule(ctx context.Context, request *DeleteScheduleRequest) (*DeleteScheduleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Moab", "DeleteSchedule").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Moab", "DeleteSchedule"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Moab", "DeleteSchedule")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteSchedule(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Moab", "DeleteSchedule", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func NewMoabGrpcClient(address string, signer evrblk.RequestSigner) *MoabGrpcClient {
	conn, err := grpc.NewClient(address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return &MoabGrpcClient{
		conn:   conn,
		grpc:   NewMoabPreviewApiClient(conn),
		signer: signer,
	}
}
