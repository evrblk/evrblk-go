// Code generated by `go run ./cmd/codegen`. DO NOT EDIT.

package iam

import (
	"context"
	evrblk "github.com/evrblk/evrblk-go"
	internal "github.com/evrblk/evrblk-go/internal"
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
	"log"
	"time"
)

type IAMApi interface {
	CreateRole(ctx context.Context, request *CreateRoleRequest) (*CreateRoleResponse, error)
	GetRole(ctx context.Context, request *GetRoleRequest) (*GetRoleResponse, error)
	UpdateRole(ctx context.Context, request *UpdateRoleRequest) (*UpdateRoleResponse, error)
	ListRoles(ctx context.Context, request *ListRolesRequest) (*ListRolesResponse, error)
	DeleteRole(ctx context.Context, request *DeleteRoleRequest) (*DeleteRoleResponse, error)
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*UpdateUserResponse, error)
	ListUsers(ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUserRequest) (*DeleteUserResponse, error)
	CreateApiKey(ctx context.Context, request *CreateApiKeyRequest) (*CreateApiKeyResponse, error)
	GetApiKey(ctx context.Context, request *GetApiKeyRequest) (*GetApiKeyResponse, error)
	ListApiKeys(ctx context.Context, request *ListApiKeysRequest) (*ListApiKeysResponse, error)
	DeleteApiKey(ctx context.Context, request *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
}
type IAMGrpcClient struct {
	grpc   IamPreviewApiClient
	conn   *grpc.ClientConn
	signer evrblk.RequestSigner
}

var _ IAMApi = &IAMGrpcClient{}

func (c *IAMGrpcClient) WithSigner(signer evrblk.RequestSigner) *IAMGrpcClient {
	return &IAMGrpcClient{
		conn:   c.conn,
		grpc:   c.grpc,
		signer: signer,
	}
}

func (c *IAMGrpcClient) Close() {
	c.conn.Close()
}

func (c *IAMGrpcClient) CreateRole(ctx context.Context, request *CreateRoleRequest) (*CreateRoleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "CreateRole").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "CreateRole"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateRole(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "CreateRole", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) GetRole(ctx context.Context, request *GetRoleRequest) (*GetRoleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "GetRole").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "GetRole"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetRole(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "GetRole", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) UpdateRole(ctx context.Context, request *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "UpdateRole").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "UpdateRole"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateRole(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "UpdateRole", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) ListRoles(ctx context.Context, request *ListRolesRequest) (*ListRolesResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "ListRoles").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "ListRoles"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListRoles(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "ListRoles", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) DeleteRole(ctx context.Context, request *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "DeleteRole").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "DeleteRole"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteRole(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "DeleteRole", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "CreateUser").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "CreateUser"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateUser(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "CreateUser", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "GetUser").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "GetUser"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetUser(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "GetUser", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*UpdateUserResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "UpdateUser").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "UpdateUser"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateUser(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "UpdateUser", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) ListUsers(ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "ListUsers").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "ListUsers"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListUsers(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "ListUsers", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) DeleteUser(ctx context.Context, request *DeleteUserRequest) (*DeleteUserResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "DeleteUser").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "DeleteUser"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteUser(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "DeleteUser", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) CreateApiKey(ctx context.Context, request *CreateApiKeyRequest) (*CreateApiKeyResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "CreateApiKey").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "CreateApiKey"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateApiKey(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "CreateApiKey", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) GetApiKey(ctx context.Context, request *GetApiKeyRequest) (*GetApiKeyResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "GetApiKey").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "GetApiKey"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetApiKey(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "GetApiKey", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) ListApiKeys(ctx context.Context, request *ListApiKeysRequest) (*ListApiKeysResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "ListApiKeys").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "ListApiKeys"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListApiKeys(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "ListApiKeys", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *IAMGrpcClient) DeleteApiKey(ctx context.Context, request *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("IAM", "DeleteApiKey").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("IAM", "DeleteApiKey"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request)
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteApiKey(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("IAM", "DeleteApiKey", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func NewIAMGrpcClient(address string, signer evrblk.RequestSigner) *IAMGrpcClient {
	conn, err := grpc.NewClient(address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return &IAMGrpcClient{
		conn:   conn,
		grpc:   NewIamPreviewApiClient(conn),
		signer: signer,
	}
}
