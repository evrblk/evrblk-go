// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.32.0
// source: proto/myaccount/preview/api.proto

package myaccount

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{0}
}

type GetAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version       uint64                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	ServiceLimits *ServiceLimits         `protobuf:"bytes,7,opt,name=service_limits,json=serviceLimits,proto3" json:"service_limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Account) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Account) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Account) GetServiceLimits() *ServiceLimits {
	if x != nil {
		return x.ServiceLimits
	}
	return nil
}

type ServiceLimits struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IamServiceLimits   *IAMServiceLimits      `protobuf:"bytes,1,opt,name=iam_service_limits,json=iamServiceLimits,proto3" json:"iam_service_limits,omitempty"`
	MoabServiceLimits  *MoabServiceLimits     `protobuf:"bytes,2,opt,name=moab_service_limits,json=moabServiceLimits,proto3" json:"moab_service_limits,omitempty"`
	BisonServiceLimits *BisonServiceLimits    `protobuf:"bytes,3,opt,name=bison_service_limits,json=bisonServiceLimits,proto3" json:"bison_service_limits,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceLimits) Reset() {
	*x = ServiceLimits{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLimits) ProtoMessage() {}

func (x *ServiceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLimits.ProtoReflect.Descriptor instead.
func (*ServiceLimits) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceLimits) GetIamServiceLimits() *IAMServiceLimits {
	if x != nil {
		return x.IamServiceLimits
	}
	return nil
}

func (x *ServiceLimits) GetMoabServiceLimits() *MoabServiceLimits {
	if x != nil {
		return x.MoabServiceLimits
	}
	return nil
}

func (x *ServiceLimits) GetBisonServiceLimits() *BisonServiceLimits {
	if x != nil {
		return x.BisonServiceLimits
	}
	return nil
}

type IAMServiceLimits struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	MaxNumberOfRoles              int64                  `protobuf:"varint,1,opt,name=max_number_of_roles,json=maxNumberOfRoles,proto3" json:"max_number_of_roles,omitempty"`
	MaxNumberOfUsers              int64                  `protobuf:"varint,2,opt,name=max_number_of_users,json=maxNumberOfUsers,proto3" json:"max_number_of_users,omitempty"`
	MaxNumberOfApiKeys            int64                  `protobuf:"varint,3,opt,name=max_number_of_api_keys,json=maxNumberOfApiKeys,proto3" json:"max_number_of_api_keys,omitempty"`
	ControlPlaneReadRequestRate   int64                  `protobuf:"varint,4,opt,name=control_plane_read_request_rate,json=controlPlaneReadRequestRate,proto3" json:"control_plane_read_request_rate,omitempty"`
	ControlPlaneUpdateRequestRate int64                  `protobuf:"varint,5,opt,name=control_plane_update_request_rate,json=controlPlaneUpdateRequestRate,proto3" json:"control_plane_update_request_rate,omitempty"` //  int64 data_plane_request_rate = 6;
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *IAMServiceLimits) Reset() {
	*x = IAMServiceLimits{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IAMServiceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMServiceLimits) ProtoMessage() {}

func (x *IAMServiceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMServiceLimits.ProtoReflect.Descriptor instead.
func (*IAMServiceLimits) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{4}
}

func (x *IAMServiceLimits) GetMaxNumberOfRoles() int64 {
	if x != nil {
		return x.MaxNumberOfRoles
	}
	return 0
}

func (x *IAMServiceLimits) GetMaxNumberOfUsers() int64 {
	if x != nil {
		return x.MaxNumberOfUsers
	}
	return 0
}

func (x *IAMServiceLimits) GetMaxNumberOfApiKeys() int64 {
	if x != nil {
		return x.MaxNumberOfApiKeys
	}
	return 0
}

func (x *IAMServiceLimits) GetControlPlaneReadRequestRate() int64 {
	if x != nil {
		return x.ControlPlaneReadRequestRate
	}
	return 0
}

func (x *IAMServiceLimits) GetControlPlaneUpdateRequestRate() int64 {
	if x != nil {
		return x.ControlPlaneUpdateRequestRate
	}
	return 0
}

type MoabServiceLimits struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	MaxNumberOfQueues             int64                  `protobuf:"varint,1,opt,name=max_number_of_queues,json=maxNumberOfQueues,proto3" json:"max_number_of_queues,omitempty"`
	MaxNumberOfSchedulesPerQueue  int64                  `protobuf:"varint,2,opt,name=max_number_of_schedules_per_queue,json=maxNumberOfSchedulesPerQueue,proto3" json:"max_number_of_schedules_per_queue,omitempty"`
	MaxNumberOfSchedules          int64                  `protobuf:"varint,3,opt,name=max_number_of_schedules,json=maxNumberOfSchedules,proto3" json:"max_number_of_schedules,omitempty"`
	EnqueuePerQueueRequestRate    int64                  `protobuf:"varint,4,opt,name=enqueue_per_queue_request_rate,json=enqueuePerQueueRequestRate,proto3" json:"enqueue_per_queue_request_rate,omitempty"`
	DequeuePerQueueRequestRate    int64                  `protobuf:"varint,5,opt,name=dequeue_per_queue_request_rate,json=dequeuePerQueueRequestRate,proto3" json:"dequeue_per_queue_request_rate,omitempty"`
	MaxEnqueueBatchSize           int64                  `protobuf:"varint,6,opt,name=max_enqueue_batch_size,json=maxEnqueueBatchSize,proto3" json:"max_enqueue_batch_size,omitempty"`
	MaxDequeueBatchSize           int64                  `protobuf:"varint,7,opt,name=max_dequeue_batch_size,json=maxDequeueBatchSize,proto3" json:"max_dequeue_batch_size,omitempty"`
	ControlPlaneReadRequestRate   int64                  `protobuf:"varint,8,opt,name=control_plane_read_request_rate,json=controlPlaneReadRequestRate,proto3" json:"control_plane_read_request_rate,omitempty"`
	ControlPlaneUpdateRequestRate int64                  `protobuf:"varint,9,opt,name=control_plane_update_request_rate,json=controlPlaneUpdateRequestRate,proto3" json:"control_plane_update_request_rate,omitempty"`
	DataPlaneRequestRate          int64                  `protobuf:"varint,10,opt,name=data_plane_request_rate,json=dataPlaneRequestRate,proto3" json:"data_plane_request_rate,omitempty"`
	PurgeQueueRequestRate         int64                  `protobuf:"varint,11,opt,name=purge_queue_request_rate,json=purgeQueueRequestRate,proto3" json:"purge_queue_request_rate,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *MoabServiceLimits) Reset() {
	*x = MoabServiceLimits{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoabServiceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoabServiceLimits) ProtoMessage() {}

func (x *MoabServiceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoabServiceLimits.ProtoReflect.Descriptor instead.
func (*MoabServiceLimits) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{5}
}

func (x *MoabServiceLimits) GetMaxNumberOfQueues() int64 {
	if x != nil {
		return x.MaxNumberOfQueues
	}
	return 0
}

func (x *MoabServiceLimits) GetMaxNumberOfSchedulesPerQueue() int64 {
	if x != nil {
		return x.MaxNumberOfSchedulesPerQueue
	}
	return 0
}

func (x *MoabServiceLimits) GetMaxNumberOfSchedules() int64 {
	if x != nil {
		return x.MaxNumberOfSchedules
	}
	return 0
}

func (x *MoabServiceLimits) GetEnqueuePerQueueRequestRate() int64 {
	if x != nil {
		return x.EnqueuePerQueueRequestRate
	}
	return 0
}

func (x *MoabServiceLimits) GetDequeuePerQueueRequestRate() int64 {
	if x != nil {
		return x.DequeuePerQueueRequestRate
	}
	return 0
}

func (x *MoabServiceLimits) GetMaxEnqueueBatchSize() int64 {
	if x != nil {
		return x.MaxEnqueueBatchSize
	}
	return 0
}

func (x *MoabServiceLimits) GetMaxDequeueBatchSize() int64 {
	if x != nil {
		return x.MaxDequeueBatchSize
	}
	return 0
}

func (x *MoabServiceLimits) GetControlPlaneReadRequestRate() int64 {
	if x != nil {
		return x.ControlPlaneReadRequestRate
	}
	return 0
}

func (x *MoabServiceLimits) GetControlPlaneUpdateRequestRate() int64 {
	if x != nil {
		return x.ControlPlaneUpdateRequestRate
	}
	return 0
}

func (x *MoabServiceLimits) GetDataPlaneRequestRate() int64 {
	if x != nil {
		return x.DataPlaneRequestRate
	}
	return 0
}

func (x *MoabServiceLimits) GetPurgeQueueRequestRate() int64 {
	if x != nil {
		return x.PurgeQueueRequestRate
	}
	return 0
}

type BisonServiceLimits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BisonServiceLimits) Reset() {
	*x = BisonServiceLimits{}
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BisonServiceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BisonServiceLimits) ProtoMessage() {}

func (x *BisonServiceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_myaccount_preview_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BisonServiceLimits.ProtoReflect.Descriptor instead.
func (*BisonServiceLimits) Descriptor() ([]byte, []int) {
	return file_proto_myaccount_preview_api_proto_rawDescGZIP(), []int{6}
}

var File_proto_myaccount_preview_api_proto protoreflect.FileDescriptor

var file_proto_myaccount_preview_api_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x01,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5c, 0x0a,
	0x12, 0x69, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x49, 0x41, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x10, 0x69, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x6d,
	0x6f, 0x61, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4d, 0x6f, 0x61, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x11, 0x6d, 0x6f, 0x61, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x14,
	0x62, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x42, 0x69, 0x73, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x12, 0x62, 0x69,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0xb4, 0x02, 0x0a, 0x10, 0x49, 0x41, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x11, 0x4d, 0x6f, 0x61, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x21, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x1e, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x64, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x42, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x32, 0x88, 0x01, 0x0a, 0x13, 0x4d, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x70, 0x69, 0x12, 0x71,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x79, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x56, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2f, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x3b, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xea, 0x02, 0x1a, 0x45,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x3a, 0x3a, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x3a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_myaccount_preview_api_proto_rawDescOnce sync.Once
	file_proto_myaccount_preview_api_proto_rawDescData = file_proto_myaccount_preview_api_proto_rawDesc
)

func file_proto_myaccount_preview_api_proto_rawDescGZIP() []byte {
	file_proto_myaccount_preview_api_proto_rawDescOnce.Do(func() {
		file_proto_myaccount_preview_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_myaccount_preview_api_proto_rawDescData)
	})
	return file_proto_myaccount_preview_api_proto_rawDescData
}

var file_proto_myaccount_preview_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_myaccount_preview_api_proto_goTypes = []any{
	(*GetAccountRequest)(nil),  // 0: com.evrblk.myaccount.preview.GetAccountRequest
	(*GetAccountResponse)(nil), // 1: com.evrblk.myaccount.preview.GetAccountResponse
	(*Account)(nil),            // 2: com.evrblk.myaccount.preview.Account
	(*ServiceLimits)(nil),      // 3: com.evrblk.myaccount.preview.ServiceLimits
	(*IAMServiceLimits)(nil),   // 4: com.evrblk.myaccount.preview.IAMServiceLimits
	(*MoabServiceLimits)(nil),  // 5: com.evrblk.myaccount.preview.MoabServiceLimits
	(*BisonServiceLimits)(nil), // 6: com.evrblk.myaccount.preview.BisonServiceLimits
}
var file_proto_myaccount_preview_api_proto_depIdxs = []int32{
	2, // 0: com.evrblk.myaccount.preview.GetAccountResponse.account:type_name -> com.evrblk.myaccount.preview.Account
	3, // 1: com.evrblk.myaccount.preview.Account.service_limits:type_name -> com.evrblk.myaccount.preview.ServiceLimits
	4, // 2: com.evrblk.myaccount.preview.ServiceLimits.iam_service_limits:type_name -> com.evrblk.myaccount.preview.IAMServiceLimits
	5, // 3: com.evrblk.myaccount.preview.ServiceLimits.moab_service_limits:type_name -> com.evrblk.myaccount.preview.MoabServiceLimits
	6, // 4: com.evrblk.myaccount.preview.ServiceLimits.bison_service_limits:type_name -> com.evrblk.myaccount.preview.BisonServiceLimits
	0, // 5: com.evrblk.myaccount.preview.MyAccountPreviewApi.GetAccount:input_type -> com.evrblk.myaccount.preview.GetAccountRequest
	1, // 6: com.evrblk.myaccount.preview.MyAccountPreviewApi.GetAccount:output_type -> com.evrblk.myaccount.preview.GetAccountResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_myaccount_preview_api_proto_init() }
func file_proto_myaccount_preview_api_proto_init() {
	if File_proto_myaccount_preview_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_myaccount_preview_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_myaccount_preview_api_proto_goTypes,
		DependencyIndexes: file_proto_myaccount_preview_api_proto_depIdxs,
		MessageInfos:      file_proto_myaccount_preview_api_proto_msgTypes,
	}.Build()
	File_proto_myaccount_preview_api_proto = out.File
	file_proto_myaccount_preview_api_proto_rawDesc = nil
	file_proto_myaccount_preview_api_proto_goTypes = nil
	file_proto_myaccount_preview_api_proto_depIdxs = nil
}
