// Code generated by `go run ./cmd/codegen`. DO NOT EDIT.

package myaccount

import (
	"context"
	evrblk "github.com/evrblk/evrblk-go"
	internal "github.com/evrblk/evrblk-go/internal"
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
	"log"
	"time"
)

type MyAccountApi interface {
	GetAccount(ctx context.Context, request *GetAccountRequest) (*GetAccountResponse, error)
}
type MyAccountGrpcClient struct {
	grpc   MyAccountPreviewApiClient
	conn   *grpc.ClientConn
	signer evrblk.RequestSigner
}

var _ MyAccountApi = &MyAccountGrpcClient{}

func (c *MyAccountGrpcClient) WithSigner(signer evrblk.RequestSigner) *MyAccountGrpcClient {
	return &MyAccountGrpcClient{
		conn:   c.conn,
		grpc:   c.grpc,
		signer: signer,
	}
}

func (c *MyAccountGrpcClient) Close() {
	c.conn.Close()
}

func (c *MyAccountGrpcClient) GetAccount(ctx context.Context, request *GetAccountRequest) (*GetAccountResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("MyAccount", "GetAccount").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("MyAccount", "GetAccount"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "MyAccount", "GetAccount")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetAccount(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("MyAccount", "GetAccount", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func NewMyAccountGrpcClient(address string, signer evrblk.RequestSigner) *MyAccountGrpcClient {
	conn, err := grpc.NewClient(address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return &MyAccountGrpcClient{
		conn:   conn,
		grpc:   NewMyAccountPreviewApiClient(conn),
		signer: signer,
	}
}
