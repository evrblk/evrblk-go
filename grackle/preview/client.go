// Code generated by `go run ./cmd/codegen`. DO NOT EDIT.

package grackle

import (
	"context"
	evrblk "github.com/evrblk/evrblk-go"
	internal "github.com/evrblk/evrblk-go/internal"
	grpc "google.golang.org/grpc"
	insecure "google.golang.org/grpc/credentials/insecure"
	"log"
	"time"
)

type GrackleApi interface {
	CreateNamespace(ctx context.Context, request *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	ListNamespaces(ctx context.Context, request *ListNamespacesRequest) (*ListNamespacesResponse, error)
	GetNamespace(ctx context.Context, request *GetNamespaceRequest) (*GetNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, request *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, request *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	CreateSemaphore(ctx context.Context, request *CreateSemaphoreRequest) (*CreateSemaphoreResponse, error)
	ListSemaphores(ctx context.Context, request *ListSemaphoresRequest) (*ListSemaphoresResponse, error)
	GetSemaphore(ctx context.Context, request *GetSemaphoreRequest) (*GetSemaphoreResponse, error)
	AcquireSemaphore(ctx context.Context, request *AcquireSemaphoreRequest) (*AcquireSemaphoreResponse, error)
	ReleaseSemaphore(ctx context.Context, request *ReleaseSemaphoreRequest) (*ReleaseSemaphoreResponse, error)
	UpdateSemaphore(ctx context.Context, request *UpdateSemaphoreRequest) (*UpdateSemaphoreResponse, error)
	DeleteSemaphore(ctx context.Context, request *DeleteSemaphoreRequest) (*DeleteSemaphoreResponse, error)
	CreateWaitGroup(ctx context.Context, request *CreateWaitGroupRequest) (*CreateWaitGroupResponse, error)
	ListWaitGroups(ctx context.Context, request *ListWaitGroupsRequest) (*ListWaitGroupsResponse, error)
	GetWaitGroup(ctx context.Context, request *GetWaitGroupRequest) (*GetWaitGroupResponse, error)
	DeleteWaitGroup(ctx context.Context, request *DeleteWaitGroupRequest) (*DeleteWaitGroupResponse, error)
	AddJobsToWaitGroup(ctx context.Context, request *AddJobsToWaitGroupRequest) (*AddJobsToWaitGroupResponse, error)
	CompleteJobsFromWaitGroup(ctx context.Context, request *CompleteJobsFromWaitGroupRequest) (*CompleteJobsFromWaitGroupResponse, error)
	AcquireLock(ctx context.Context, request *AcquireLockRequest) (*AcquireLockResponse, error)
	ReleaseLock(ctx context.Context, request *ReleaseLockRequest) (*ReleaseLockResponse, error)
	GetLock(ctx context.Context, request *GetLockRequest) (*GetLockResponse, error)
	DeleteLock(ctx context.Context, request *DeleteLockRequest) (*DeleteLockResponse, error)
	ListLocks(ctx context.Context, request *ListLocksRequest) (*ListLocksResponse, error)
}
type GrackleGrpcClient struct {
	grpc   GracklePreviewApiClient
	conn   *grpc.ClientConn
	signer evrblk.RequestSigner
}

var _ GrackleApi = &GrackleGrpcClient{}

func (c *GrackleGrpcClient) WithSigner(signer evrblk.RequestSigner) *GrackleGrpcClient {
	return &GrackleGrpcClient{
		conn:   c.conn,
		grpc:   c.grpc,
		signer: signer,
	}
}

func (c *GrackleGrpcClient) Close() {
	c.conn.Close()
}

func (c *GrackleGrpcClient) CreateNamespace(ctx context.Context, request *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "CreateNamespace").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "CreateNamespace"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "CreateNamespace")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateNamespace(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "CreateNamespace", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ListNamespaces(ctx context.Context, request *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ListNamespaces").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ListNamespaces"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ListNamespaces")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListNamespaces(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ListNamespaces", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) GetNamespace(ctx context.Context, request *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "GetNamespace").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "GetNamespace"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "GetNamespace")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetNamespace(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "GetNamespace", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) DeleteNamespace(ctx context.Context, request *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "DeleteNamespace").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "DeleteNamespace"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "DeleteNamespace")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteNamespace(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "DeleteNamespace", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) UpdateNamespace(ctx context.Context, request *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "UpdateNamespace").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "UpdateNamespace"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "UpdateNamespace")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateNamespace(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "UpdateNamespace", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) CreateSemaphore(ctx context.Context, request *CreateSemaphoreRequest) (*CreateSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "CreateSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "CreateSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "CreateSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "CreateSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ListSemaphores(ctx context.Context, request *ListSemaphoresRequest) (*ListSemaphoresResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ListSemaphores").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ListSemaphores"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ListSemaphores")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListSemaphores(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ListSemaphores", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) GetSemaphore(ctx context.Context, request *GetSemaphoreRequest) (*GetSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "GetSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "GetSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "GetSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "GetSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) AcquireSemaphore(ctx context.Context, request *AcquireSemaphoreRequest) (*AcquireSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "AcquireSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "AcquireSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "AcquireSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.AcquireSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "AcquireSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ReleaseSemaphore(ctx context.Context, request *ReleaseSemaphoreRequest) (*ReleaseSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ReleaseSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ReleaseSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ReleaseSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ReleaseSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ReleaseSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) UpdateSemaphore(ctx context.Context, request *UpdateSemaphoreRequest) (*UpdateSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "UpdateSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "UpdateSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "UpdateSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.UpdateSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "UpdateSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) DeleteSemaphore(ctx context.Context, request *DeleteSemaphoreRequest) (*DeleteSemaphoreResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "DeleteSemaphore").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "DeleteSemaphore"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "DeleteSemaphore")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteSemaphore(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "DeleteSemaphore", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) CreateWaitGroup(ctx context.Context, request *CreateWaitGroupRequest) (*CreateWaitGroupResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "CreateWaitGroup").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "CreateWaitGroup"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "CreateWaitGroup")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CreateWaitGroup(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "CreateWaitGroup", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ListWaitGroups(ctx context.Context, request *ListWaitGroupsRequest) (*ListWaitGroupsResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ListWaitGroups").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ListWaitGroups"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ListWaitGroups")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListWaitGroups(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ListWaitGroups", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) GetWaitGroup(ctx context.Context, request *GetWaitGroupRequest) (*GetWaitGroupResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "GetWaitGroup").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "GetWaitGroup"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "GetWaitGroup")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetWaitGroup(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "GetWaitGroup", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) DeleteWaitGroup(ctx context.Context, request *DeleteWaitGroupRequest) (*DeleteWaitGroupResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "DeleteWaitGroup").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "DeleteWaitGroup"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "DeleteWaitGroup")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteWaitGroup(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "DeleteWaitGroup", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) AddJobsToWaitGroup(ctx context.Context, request *AddJobsToWaitGroupRequest) (*AddJobsToWaitGroupResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "AddJobsToWaitGroup").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "AddJobsToWaitGroup"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "AddJobsToWaitGroup")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.AddJobsToWaitGroup(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "AddJobsToWaitGroup", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) CompleteJobsFromWaitGroup(ctx context.Context, request *CompleteJobsFromWaitGroupRequest) (*CompleteJobsFromWaitGroupResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "CompleteJobsFromWaitGroup").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "CompleteJobsFromWaitGroup"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "CompleteJobsFromWaitGroup")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.CompleteJobsFromWaitGroup(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "CompleteJobsFromWaitGroup", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) AcquireLock(ctx context.Context, request *AcquireLockRequest) (*AcquireLockResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "AcquireLock").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "AcquireLock"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "AcquireLock")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.AcquireLock(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "AcquireLock", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ReleaseLock(ctx context.Context, request *ReleaseLockRequest) (*ReleaseLockResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ReleaseLock").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ReleaseLock"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ReleaseLock")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ReleaseLock(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ReleaseLock", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) GetLock(ctx context.Context, request *GetLockRequest) (*GetLockResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "GetLock").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "GetLock"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "GetLock")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.GetLock(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "GetLock", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) DeleteLock(ctx context.Context, request *DeleteLockRequest) (*DeleteLockResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "DeleteLock").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "DeleteLock"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "DeleteLock")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.DeleteLock(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "DeleteLock", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func (c *GrackleGrpcClient) ListLocks(ctx context.Context, request *ListLocksRequest) (*ListLocksResponse, error) {
	internal.TotalRequestsCounter.WithLabelValues("Grackle", "ListLocks").Inc()
	defer internal.MeasureSince(internal.RequestsDuration.WithLabelValues("Grackle", "ListLocks"), time.Now())

	signedCtx, err := c.signer.Sign(ctx, request, "Grackle", "ListLocks")
	if err != nil {
		return nil, err
	}

	resp, err := c.grpc.ListLocks(signedCtx, request, grpc.WaitForReady(true))
	if err != nil {
		internal.FailedRequestsCounter.WithLabelValues("Grackle", "ListLocks", internal.MetricLabelFromGrpcError(err)).Inc()
	}

	return resp, internal.ErrorFromRpcError(err)
}

func NewGrackleGrpcClient(address string, signer evrblk.RequestSigner) *GrackleGrpcClient {
	conn, err := grpc.NewClient(address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return &GrackleGrpcClient{
		conn:   conn,
		grpc:   NewGracklePreviewApiClient(conn),
		signer: signer,
	}
}
