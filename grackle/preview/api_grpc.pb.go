// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: evrblkapis/grackle/preview/api.proto

package grackle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GracklePreviewApi_CreateNamespace_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/CreateNamespace"
	GracklePreviewApi_ListNamespaces_FullMethodName            = "/com.evrblk.grackle.preview.GracklePreviewApi/ListNamespaces"
	GracklePreviewApi_GetNamespace_FullMethodName              = "/com.evrblk.grackle.preview.GracklePreviewApi/GetNamespace"
	GracklePreviewApi_DeleteNamespace_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/DeleteNamespace"
	GracklePreviewApi_UpdateNamespace_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/UpdateNamespace"
	GracklePreviewApi_CreateSemaphore_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/CreateSemaphore"
	GracklePreviewApi_ListSemaphores_FullMethodName            = "/com.evrblk.grackle.preview.GracklePreviewApi/ListSemaphores"
	GracklePreviewApi_GetSemaphore_FullMethodName              = "/com.evrblk.grackle.preview.GracklePreviewApi/GetSemaphore"
	GracklePreviewApi_AcquireSemaphore_FullMethodName          = "/com.evrblk.grackle.preview.GracklePreviewApi/AcquireSemaphore"
	GracklePreviewApi_ReleaseSemaphore_FullMethodName          = "/com.evrblk.grackle.preview.GracklePreviewApi/ReleaseSemaphore"
	GracklePreviewApi_UpdateSemaphore_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/UpdateSemaphore"
	GracklePreviewApi_DeleteSemaphore_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/DeleteSemaphore"
	GracklePreviewApi_CreateWaitGroup_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/CreateWaitGroup"
	GracklePreviewApi_ListWaitGroups_FullMethodName            = "/com.evrblk.grackle.preview.GracklePreviewApi/ListWaitGroups"
	GracklePreviewApi_GetWaitGroup_FullMethodName              = "/com.evrblk.grackle.preview.GracklePreviewApi/GetWaitGroup"
	GracklePreviewApi_DeleteWaitGroup_FullMethodName           = "/com.evrblk.grackle.preview.GracklePreviewApi/DeleteWaitGroup"
	GracklePreviewApi_AddJobsToWaitGroup_FullMethodName        = "/com.evrblk.grackle.preview.GracklePreviewApi/AddJobsToWaitGroup"
	GracklePreviewApi_CompleteJobsFromWaitGroup_FullMethodName = "/com.evrblk.grackle.preview.GracklePreviewApi/CompleteJobsFromWaitGroup"
	GracklePreviewApi_AcquireLock_FullMethodName               = "/com.evrblk.grackle.preview.GracklePreviewApi/AcquireLock"
	GracklePreviewApi_ReleaseLock_FullMethodName               = "/com.evrblk.grackle.preview.GracklePreviewApi/ReleaseLock"
	GracklePreviewApi_GetLock_FullMethodName                   = "/com.evrblk.grackle.preview.GracklePreviewApi/GetLock"
	GracklePreviewApi_DeleteLock_FullMethodName                = "/com.evrblk.grackle.preview.GracklePreviewApi/DeleteLock"
	GracklePreviewApi_ListLocks_FullMethodName                 = "/com.evrblk.grackle.preview.GracklePreviewApi/ListLocks"
)

// GracklePreviewApiClient is the client API for GracklePreviewApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GracklePreviewApiClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	CreateSemaphore(ctx context.Context, in *CreateSemaphoreRequest, opts ...grpc.CallOption) (*CreateSemaphoreResponse, error)
	ListSemaphores(ctx context.Context, in *ListSemaphoresRequest, opts ...grpc.CallOption) (*ListSemaphoresResponse, error)
	GetSemaphore(ctx context.Context, in *GetSemaphoreRequest, opts ...grpc.CallOption) (*GetSemaphoreResponse, error)
	AcquireSemaphore(ctx context.Context, in *AcquireSemaphoreRequest, opts ...grpc.CallOption) (*AcquireSemaphoreResponse, error)
	ReleaseSemaphore(ctx context.Context, in *ReleaseSemaphoreRequest, opts ...grpc.CallOption) (*ReleaseSemaphoreResponse, error)
	UpdateSemaphore(ctx context.Context, in *UpdateSemaphoreRequest, opts ...grpc.CallOption) (*UpdateSemaphoreResponse, error)
	DeleteSemaphore(ctx context.Context, in *DeleteSemaphoreRequest, opts ...grpc.CallOption) (*DeleteSemaphoreResponse, error)
	CreateWaitGroup(ctx context.Context, in *CreateWaitGroupRequest, opts ...grpc.CallOption) (*CreateWaitGroupResponse, error)
	ListWaitGroups(ctx context.Context, in *ListWaitGroupsRequest, opts ...grpc.CallOption) (*ListWaitGroupsResponse, error)
	GetWaitGroup(ctx context.Context, in *GetWaitGroupRequest, opts ...grpc.CallOption) (*GetWaitGroupResponse, error)
	DeleteWaitGroup(ctx context.Context, in *DeleteWaitGroupRequest, opts ...grpc.CallOption) (*DeleteWaitGroupResponse, error)
	AddJobsToWaitGroup(ctx context.Context, in *AddJobsToWaitGroupRequest, opts ...grpc.CallOption) (*AddJobsToWaitGroupResponse, error)
	CompleteJobsFromWaitGroup(ctx context.Context, in *CompleteJobsFromWaitGroupRequest, opts ...grpc.CallOption) (*CompleteJobsFromWaitGroupResponse, error)
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error)
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error)
	GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error)
	DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error)
	ListLocks(ctx context.Context, in *ListLocksRequest, opts ...grpc.CallOption) (*ListLocksResponse, error)
}

type gracklePreviewApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGracklePreviewApiClient(cc grpc.ClientConnInterface) GracklePreviewApiClient {
	return &gracklePreviewApiClient{cc}
}

func (c *gracklePreviewApiClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_UpdateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) CreateSemaphore(ctx context.Context, in *CreateSemaphoreRequest, opts ...grpc.CallOption) (*CreateSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_CreateSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ListSemaphores(ctx context.Context, in *ListSemaphoresRequest, opts ...grpc.CallOption) (*ListSemaphoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSemaphoresResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ListSemaphores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) GetSemaphore(ctx context.Context, in *GetSemaphoreRequest, opts ...grpc.CallOption) (*GetSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_GetSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) AcquireSemaphore(ctx context.Context, in *AcquireSemaphoreRequest, opts ...grpc.CallOption) (*AcquireSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcquireSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_AcquireSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ReleaseSemaphore(ctx context.Context, in *ReleaseSemaphoreRequest, opts ...grpc.CallOption) (*ReleaseSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ReleaseSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) UpdateSemaphore(ctx context.Context, in *UpdateSemaphoreRequest, opts ...grpc.CallOption) (*UpdateSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_UpdateSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) DeleteSemaphore(ctx context.Context, in *DeleteSemaphoreRequest, opts ...grpc.CallOption) (*DeleteSemaphoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSemaphoreResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_DeleteSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) CreateWaitGroup(ctx context.Context, in *CreateWaitGroupRequest, opts ...grpc.CallOption) (*CreateWaitGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWaitGroupResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_CreateWaitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ListWaitGroups(ctx context.Context, in *ListWaitGroupsRequest, opts ...grpc.CallOption) (*ListWaitGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWaitGroupsResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ListWaitGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) GetWaitGroup(ctx context.Context, in *GetWaitGroupRequest, opts ...grpc.CallOption) (*GetWaitGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaitGroupResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_GetWaitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) DeleteWaitGroup(ctx context.Context, in *DeleteWaitGroupRequest, opts ...grpc.CallOption) (*DeleteWaitGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWaitGroupResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_DeleteWaitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) AddJobsToWaitGroup(ctx context.Context, in *AddJobsToWaitGroupRequest, opts ...grpc.CallOption) (*AddJobsToWaitGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddJobsToWaitGroupResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_AddJobsToWaitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) CompleteJobsFromWaitGroup(ctx context.Context, in *CompleteJobsFromWaitGroupRequest, opts ...grpc.CallOption) (*CompleteJobsFromWaitGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteJobsFromWaitGroupResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_CompleteJobsFromWaitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcquireLockResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_AcquireLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseLockResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ReleaseLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLockResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_GetLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLockResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_DeleteLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gracklePreviewApiClient) ListLocks(ctx context.Context, in *ListLocksRequest, opts ...grpc.CallOption) (*ListLocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocksResponse)
	err := c.cc.Invoke(ctx, GracklePreviewApi_ListLocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GracklePreviewApiServer is the server API for GracklePreviewApi service.
// All implementations must embed UnimplementedGracklePreviewApiServer
// for forward compatibility.
type GracklePreviewApiServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	CreateSemaphore(context.Context, *CreateSemaphoreRequest) (*CreateSemaphoreResponse, error)
	ListSemaphores(context.Context, *ListSemaphoresRequest) (*ListSemaphoresResponse, error)
	GetSemaphore(context.Context, *GetSemaphoreRequest) (*GetSemaphoreResponse, error)
	AcquireSemaphore(context.Context, *AcquireSemaphoreRequest) (*AcquireSemaphoreResponse, error)
	ReleaseSemaphore(context.Context, *ReleaseSemaphoreRequest) (*ReleaseSemaphoreResponse, error)
	UpdateSemaphore(context.Context, *UpdateSemaphoreRequest) (*UpdateSemaphoreResponse, error)
	DeleteSemaphore(context.Context, *DeleteSemaphoreRequest) (*DeleteSemaphoreResponse, error)
	CreateWaitGroup(context.Context, *CreateWaitGroupRequest) (*CreateWaitGroupResponse, error)
	ListWaitGroups(context.Context, *ListWaitGroupsRequest) (*ListWaitGroupsResponse, error)
	GetWaitGroup(context.Context, *GetWaitGroupRequest) (*GetWaitGroupResponse, error)
	DeleteWaitGroup(context.Context, *DeleteWaitGroupRequest) (*DeleteWaitGroupResponse, error)
	AddJobsToWaitGroup(context.Context, *AddJobsToWaitGroupRequest) (*AddJobsToWaitGroupResponse, error)
	CompleteJobsFromWaitGroup(context.Context, *CompleteJobsFromWaitGroupRequest) (*CompleteJobsFromWaitGroupResponse, error)
	AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error)
	ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error)
	GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error)
	DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error)
	ListLocks(context.Context, *ListLocksRequest) (*ListLocksResponse, error)
	mustEmbedUnimplementedGracklePreviewApiServer()
}

// UnimplementedGracklePreviewApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGracklePreviewApiServer struct{}

func (UnimplementedGracklePreviewApiServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedGracklePreviewApiServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedGracklePreviewApiServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedGracklePreviewApiServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedGracklePreviewApiServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedGracklePreviewApiServer) CreateSemaphore(context.Context, *CreateSemaphoreRequest) (*CreateSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) ListSemaphores(context.Context, *ListSemaphoresRequest) (*ListSemaphoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSemaphores not implemented")
}
func (UnimplementedGracklePreviewApiServer) GetSemaphore(context.Context, *GetSemaphoreRequest) (*GetSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) AcquireSemaphore(context.Context, *AcquireSemaphoreRequest) (*AcquireSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) ReleaseSemaphore(context.Context, *ReleaseSemaphoreRequest) (*ReleaseSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) UpdateSemaphore(context.Context, *UpdateSemaphoreRequest) (*UpdateSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) DeleteSemaphore(context.Context, *DeleteSemaphoreRequest) (*DeleteSemaphoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSemaphore not implemented")
}
func (UnimplementedGracklePreviewApiServer) CreateWaitGroup(context.Context, *CreateWaitGroupRequest) (*CreateWaitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWaitGroup not implemented")
}
func (UnimplementedGracklePreviewApiServer) ListWaitGroups(context.Context, *ListWaitGroupsRequest) (*ListWaitGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWaitGroups not implemented")
}
func (UnimplementedGracklePreviewApiServer) GetWaitGroup(context.Context, *GetWaitGroupRequest) (*GetWaitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaitGroup not implemented")
}
func (UnimplementedGracklePreviewApiServer) DeleteWaitGroup(context.Context, *DeleteWaitGroupRequest) (*DeleteWaitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWaitGroup not implemented")
}
func (UnimplementedGracklePreviewApiServer) AddJobsToWaitGroup(context.Context, *AddJobsToWaitGroupRequest) (*AddJobsToWaitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobsToWaitGroup not implemented")
}
func (UnimplementedGracklePreviewApiServer) CompleteJobsFromWaitGroup(context.Context, *CompleteJobsFromWaitGroupRequest) (*CompleteJobsFromWaitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJobsFromWaitGroup not implemented")
}
func (UnimplementedGracklePreviewApiServer) AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedGracklePreviewApiServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedGracklePreviewApiServer) GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedGracklePreviewApiServer) DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLock not implemented")
}
func (UnimplementedGracklePreviewApiServer) ListLocks(context.Context, *ListLocksRequest) (*ListLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocks not implemented")
}
func (UnimplementedGracklePreviewApiServer) mustEmbedUnimplementedGracklePreviewApiServer() {}
func (UnimplementedGracklePreviewApiServer) testEmbeddedByValue()                           {}

// UnsafeGracklePreviewApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GracklePreviewApiServer will
// result in compilation errors.
type UnsafeGracklePreviewApiServer interface {
	mustEmbedUnimplementedGracklePreviewApiServer()
}

func RegisterGracklePreviewApiServer(s grpc.ServiceRegistrar, srv GracklePreviewApiServer) {
	// If the following call pancis, it indicates UnimplementedGracklePreviewApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GracklePreviewApi_ServiceDesc, srv)
}

func _GracklePreviewApi_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_CreateSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).CreateSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_CreateSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).CreateSemaphore(ctx, req.(*CreateSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ListSemaphores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSemaphoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ListSemaphores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ListSemaphores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ListSemaphores(ctx, req.(*ListSemaphoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_GetSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).GetSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_GetSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).GetSemaphore(ctx, req.(*GetSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_AcquireSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).AcquireSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_AcquireSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).AcquireSemaphore(ctx, req.(*AcquireSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ReleaseSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ReleaseSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ReleaseSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ReleaseSemaphore(ctx, req.(*ReleaseSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_UpdateSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).UpdateSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_UpdateSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).UpdateSemaphore(ctx, req.(*UpdateSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_DeleteSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).DeleteSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_DeleteSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).DeleteSemaphore(ctx, req.(*DeleteSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_CreateWaitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWaitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).CreateWaitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_CreateWaitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).CreateWaitGroup(ctx, req.(*CreateWaitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ListWaitGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWaitGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ListWaitGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ListWaitGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ListWaitGroups(ctx, req.(*ListWaitGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_GetWaitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).GetWaitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_GetWaitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).GetWaitGroup(ctx, req.(*GetWaitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_DeleteWaitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWaitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).DeleteWaitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_DeleteWaitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).DeleteWaitGroup(ctx, req.(*DeleteWaitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_AddJobsToWaitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobsToWaitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).AddJobsToWaitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_AddJobsToWaitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).AddJobsToWaitGroup(ctx, req.(*AddJobsToWaitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_CompleteJobsFromWaitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJobsFromWaitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).CompleteJobsFromWaitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_CompleteJobsFromWaitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).CompleteJobsFromWaitGroup(ctx, req.(*CompleteJobsFromWaitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_AcquireLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ReleaseLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_GetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).GetLock(ctx, req.(*GetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_DeleteLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).DeleteLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_DeleteLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).DeleteLock(ctx, req.(*DeleteLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GracklePreviewApi_ListLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GracklePreviewApiServer).ListLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GracklePreviewApi_ListLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GracklePreviewApiServer).ListLocks(ctx, req.(*ListLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GracklePreviewApi_ServiceDesc is the grpc.ServiceDesc for GracklePreviewApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GracklePreviewApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.evrblk.grackle.preview.GracklePreviewApi",
	HandlerType: (*GracklePreviewApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _GracklePreviewApi_CreateNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _GracklePreviewApi_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _GracklePreviewApi_GetNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _GracklePreviewApi_DeleteNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _GracklePreviewApi_UpdateNamespace_Handler,
		},
		{
			MethodName: "CreateSemaphore",
			Handler:    _GracklePreviewApi_CreateSemaphore_Handler,
		},
		{
			MethodName: "ListSemaphores",
			Handler:    _GracklePreviewApi_ListSemaphores_Handler,
		},
		{
			MethodName: "GetSemaphore",
			Handler:    _GracklePreviewApi_GetSemaphore_Handler,
		},
		{
			MethodName: "AcquireSemaphore",
			Handler:    _GracklePreviewApi_AcquireSemaphore_Handler,
		},
		{
			MethodName: "ReleaseSemaphore",
			Handler:    _GracklePreviewApi_ReleaseSemaphore_Handler,
		},
		{
			MethodName: "UpdateSemaphore",
			Handler:    _GracklePreviewApi_UpdateSemaphore_Handler,
		},
		{
			MethodName: "DeleteSemaphore",
			Handler:    _GracklePreviewApi_DeleteSemaphore_Handler,
		},
		{
			MethodName: "CreateWaitGroup",
			Handler:    _GracklePreviewApi_CreateWaitGroup_Handler,
		},
		{
			MethodName: "ListWaitGroups",
			Handler:    _GracklePreviewApi_ListWaitGroups_Handler,
		},
		{
			MethodName: "GetWaitGroup",
			Handler:    _GracklePreviewApi_GetWaitGroup_Handler,
		},
		{
			MethodName: "DeleteWaitGroup",
			Handler:    _GracklePreviewApi_DeleteWaitGroup_Handler,
		},
		{
			MethodName: "AddJobsToWaitGroup",
			Handler:    _GracklePreviewApi_AddJobsToWaitGroup_Handler,
		},
		{
			MethodName: "CompleteJobsFromWaitGroup",
			Handler:    _GracklePreviewApi_CompleteJobsFromWaitGroup_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _GracklePreviewApi_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _GracklePreviewApi_ReleaseLock_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _GracklePreviewApi_GetLock_Handler,
		},
		{
			MethodName: "DeleteLock",
			Handler:    _GracklePreviewApi_DeleteLock_Handler,
		},
		{
			MethodName: "ListLocks",
			Handler:    _GracklePreviewApi_ListLocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evrblkapis/grackle/preview/api.proto",
}
